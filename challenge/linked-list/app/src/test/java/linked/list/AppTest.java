/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package linked.list;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

class AppTest {
    @Test
    public void insertTest() {
        LinkedList test1 = new LinkedList();
        test1.insert("dawood");
        String expected = "dawood";
        String actual = test1.head.value;
        assertEquals( expected, actual);
    }
    @Test
    public void includesTest(){
        LinkedList test3 = new LinkedList();
        test3.insert("dd");
        test3.insert("ss");
        test3.insert("ff");
        test3.insert("gg");
        test3.insert("ll");
        boolean box = test3.includes("dd");
        assertTrue(box, "should return dd");

    }

    @Test
    public void stringTest() {
        LinkedList test5 = new LinkedList();
        test5.insert("f");
        test5.insert("y");
        test5.insert("k");
        String expected = "{ k } -> { y } -> { f } -> NULL";
        String actual = test5.toString();
        assertEquals(expected, actual);
    }


    @Test
    public void appendTestOneNode(){
        // 1- Can successfully add a node to the end of the linked list

        LinkedList list = new LinkedList();
        list.insert("a");
        list.insert("b");
        list.insert("c");
        list.append("d");
        String expected = "{ c } -> { b } -> { a } -> { d } -> NULL";
        String actual = list.toString();
        assertEquals(expected, actual);
    }

    @Test
    public void appendTestMultipleNode() {
        // 2-Can successfully add multiple nodes to the end of a linked list
        LinkedList list = new LinkedList();
        list.insert("a");
        list.insert("b");
        list.insert("c");
        list.append("d");
        String expected = "{ c } -> { b } -> { a } -> { d } -> NULL";
        String actual = list.toString();
        assertEquals(expected, actual);
    }

    @Test
    public void insertBeforeTestInMiddle(){
        //3-Can successfully insert a node before a node located i the middle of a linked list
        LinkedList list = new LinkedList();
        list.insert("l");
        list.insert("e");
        list.insert("q");
        list.insertBefore("e", "b");
        String expected = "{ q } -> { b } -> { e } -> { l } -> NULL";
        String actual = list.toString();
        assertEquals(expected, actual);
    }


    @Test
    public void insertBeforeTestAtFirst(){
        //4- Can successfully insert a node before the first node of a linked list
        LinkedList list = new LinkedList();
        list.insert("g");
        list.insert("h");
        list.insert("w");
        list.insertAfter("h", "i");
        String expected = "{ w } -> { h } -> { i } -> { g } -> NULL";
        String actual = list.toString();
        assertEquals(expected, actual);
    }





    @Test
    public void insertAfterTestInMiddle(){
        // 5-Can successfully insert after a node in the middle of the linked list
        LinkedList list = new LinkedList();
        list.insert("g");
        list.insert("h");
        list.insert("w");
        list.insertAfter("h", "i");
        String expected = "{ w } -> { h } -> { i } -> { g } -> NULL";
        String actual = list.toString();
        assertEquals(expected, actual);
    }


    @Test
    public void insertAfterTesAtFirst(){
        // 6-Can successfully insert a node after the last node of the linked list
        LinkedList list = new LinkedList();
        list.insert("g");
        list.insert("h");
        list.insert("w");
        list.insertAfter("w", "i");
        String expected = "{ w } -> { i } -> { h } -> { g } -> NULL";
        String actual = list.toString();
        assertEquals(expected, actual);
    }


    @Test
    public void kthFromEndTest(){
        LinkedList list = new LinkedList();
        list.insert("i");
        list.insert("l");
        list.insert("o");
        list.insert("h");

        //1. test to see if the (k) is greater than the length of the linked list
        Object actual = list.kthFromEnd(5);
        Object expected = "Invalid value";
        assertEquals( expected, (String) actual);

        //2. test to see if the (k) is the same length of the linked list
        Object actual1 = list.kthFromEnd(4);
        Object expected1 = "Invalid value";
        assertEquals( expected1, (String) actual1);

       // 3.Where k is not a positive integer
        Object actual2 = list.kthFromEnd(-4);
        Object expected2 = "Invalid value";
        assertEquals( expected2, (String) actual2);

       // 5.“Happy Path” where k is not at the end, but somewhere in the middle of the linked list
        Object actual3 = list.kthFromEnd(2);
        Object expected3 = "o";
        assertEquals(expected3, (String) actual3);


    }
    @Test
    public void kthFromEndTest2() {
        LinkedList list = new LinkedList();
        list.insert("i");



        //4.Where the linked list is of a size 1
        Object actual3 = list.kthFromEnd(0);
        Object expected3 = "i";
        assertEquals(expected3, (String) actual3);

    }

    @Test
    public void TestZipList(){
        LinkedList LinkedListsTest = new LinkedList();
        LinkedListsTest.insert("a");
        LinkedListsTest.insert("c");
        LinkedListsTest.insert("z");
        LinkedListsTest.insert("l");

        LinkedList LinkedListsTest2 = new LinkedList();
        LinkedListsTest2.insert("d");
        LinkedListsTest2.insert("f");
        LinkedListsTest2.insert("x");
        LinkedListsTest2.insert("a");

        LinkedList result = LinkedList.zipList(LinkedListsTest,LinkedListsTest2);
        String x = "HEAD l -> a -> z -> x -> c -> f -> a -> d -> NULL";
        System.out.println(result);
        assertEquals(x, result.toString());


    }
}
